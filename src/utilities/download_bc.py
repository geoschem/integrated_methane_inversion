#!/usr/bin/env python3

"""
Description:
------------
This Python script (assumes Python3) downloads boundary conditions
files from AWS S3 to a target directory for the requested date range.

Remarks:
--------
    (1) Jiawei Zhuang found that it is much faster to issue aws s3 cp
        commands from a bash script than a Python script.  Therefore,
        in this routine we create a bash script with all of the
        download commands that will be executed by the main routine.
"""

# Imports
import os
import sys
import subprocess

# Exit with error if we are not using Python3
assert sys.version_info.major >= 3, "ERROR: Python 3 is required to run download_bc.py!"

# Define global variables
DATA_DOWNLOAD_SCRIPT = "./auto_generated_download_script.sh"


def list_missing_files(start_date, end_date, destination):
    """
    Creates list of BC files in date range that do not already
    exist at destination.

    Args:
    -----
        start_date : str
            Initial date of simulation.
        end_date : str
            Final date of simulation.
        destination : str
            Target directory for downloaded files
    """

    missing_files = []

    start_str = str(start_date)
    start_year = start_str[:4]
    start_month = start_str[4:6]
    start_day = start_str[6:8]
    end_str = str(end_date)
    end_year = end_str[:4]
    end_month = end_str[4:6]
    end_day = end_str[6:8]

    month_days = [31, [28, 29], 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    file_prefix = "GEOSChem.BoundaryConditions."
    file_suffix = "_0000z.nc4"

    for year in range(int(start_year), int(end_year) + 1):
        # skip years with definite no data
        if year < 2018:
            print(
                "Skipping BC data download for ", str(year), ": no data from this year"
            )
            continue
        init_month = 1
        final_month = 12
        if year == int(start_year):
            # only get desired months from incomplete years
            init_month = int(start_month)
        if year == int(end_year):
            final_month = int(end_month)
        for month in range(init_month, final_month + 1):
            # skip months with definite no data
            if year == 2018 and month < 4:
                print(
                    "Skipping BC data download for ",
                    str(year),
                    "/0",
                    str(month),
                    ": no data from this month",
                )
                continue
            # add 0 to month string if necessary
            month_prefix = "0" if month < 10 else ""
            init_day = 1
            final_day = month_days[month - 1]
            # leap day
            if month == 2:
                if year % 4 == 0:
                    final_day = final_day[1]
                else:
                    final_day = final_day[0]
            if month == int(start_month) and year == int(start_year):
                # only get desired days from incomplete months
                init_day = int(start_day)
            if month == int(end_month) and year == int(end_year):
                final_day = int(end_day)
            for day in range(init_day, final_day + 1):
                # add 0 to day string if necessary
                day_prefix = "0" if day < 10 else ""

                # check if file for this day already exists
                file_name = (
                    file_prefix
                    + str(year)
                    + month_prefix
                    + str(month)
                    + day_prefix
                    + str(day)
                    + file_suffix
                )
                # add file to download list if needed
                if not os.path.exists(destination + "/" + file_name):
                    missing_files.append(file_name)

    return missing_files


def create_download_script(paths, destination, version):
    """
    Creates a data download script to obtain missing files

    Args:
    -----
        paths : dict
            Output of function list_missing_files.
    """

    # Create the data download script
    with open(DATA_DOWNLOAD_SCRIPT, "w") as f:

        # Write shebang line to script
        print("#!/bin/bash\n", file=f)
        print("# This script was generated by download_bc.py\n", file=f)

        cmd_prefix = "aws s3 cp --only-show-errors --request-payer=requester "
        remote_root = f"s3://imi-boundary-conditions/{version}/"

        # make destination if needed
        if not os.path.exists(destination):
            os.mkdir(destination)

        # Write download commands for only the missing data files
        for path in paths:
            cmd = cmd_prefix + remote_root + path + " " + destination
            print(cmd, file=f)
            print(file=f)

        # Close file and make it executable
        f.close()
        os.chmod(DATA_DOWNLOAD_SCRIPT, 0o755)


def download_the_data(start_date, end_date, destination, version):
    """
    Downloads required boundary conditions files from AWS.

    Args:
    -----
        start_date : str
            Initial date of simulation.
        end_date : str
            Final date of simulation.
        destination : str
            Target directory for downloaded files
    """

    # Get a list of missing data paths
    paths = list_missing_files(start_date, end_date, destination)

    # Create script to download missing files from AWS S3
    create_download_script(paths, destination, version)

    # Run the data download script and return the status
    # Remove the file afterwards
    status = subprocess.call(DATA_DOWNLOAD_SCRIPT)
    os.remove(DATA_DOWNLOAD_SCRIPT)

    # Raise an exception if the data was not successfully downloaded
    if status != 0:
        err_msg = "Error downloading data from AWS!"
        raise Exception(err_msg)


def main():
    """
    Main program.  Gets command-line arguments and calls function
    download_the_data to initiate a data-downloading process.

    Calling sequence:
    -----------------
        ./download_data.py start_date end_date destination
    Example call:
    -------------
        ./download_data.py 20200501 20200531 /home/ubuntu/ExtData/BoundaryConditions
    """
    download_the_data(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])


if __name__ == "__main__":
    main()
