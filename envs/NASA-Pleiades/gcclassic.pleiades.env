
#==============================================================================
# gcclassic.pleiades.env
# Environment file for GCClassic on Pleiades
#
# Compilers: 
#   Intel or GNU    Available versions can be found my typing "module avail"
#                   All theoretically available packages can be found here:
#                   https://www.nas.nasa.gov/hecc/support/kb/software-on-nas-systems_116.html
#
# Additional software:
#   git             Present always. This can be checked with "git version"
#   CMake           Present always. Version 3.13 or later is needed. This can 
#                   be checked with "cmake --version"
#==============================================================================

# Display message (if we are in a terminal window)
if [[ $- = *i* ]] ; then
    echo "Loading modules for GEOS-Chem Classic."
fi

# Unload packages loaded previously using "module load"
module purge

# Load intel compilers
module load comp-intel/2019.5.281

# netCDF-Fortran
module load szip/2.1.1
module load mpi-hpe/mpt
module load hdf4/4.2.12
module load hdf5/1.8.18_mpt
module load netcdf/4.4.1.1_mpt

# Load python for postprocessing
# Right now, this has most of the modules I need.
# Eventually, I'll make my own environment.
# module load python3/3.9.12

# And load node_stats.sh.
module load scicon/cli_tools

# # Load mpi-intel
# module use -a /nasa/modulefiles/testing
# module load mpi-intel/2019.5.281

#==============================================================================
# Environment variables
#==============================================================================
# # Parallelization
export OMP_NUM_THREADS=8
export OMP_STACKSIZE=500m

# Make all files world-readable by default
umask 022

# Specify compilers
export CC=icc
export CXX=icpc
export FC=ifort

# # Netcdf variables for CMake
# # NETCDF_HOME and NETCDF_FORTRAN_HOME are automatically
# # defined by the "module load" commands on Cannon.
# export NETCDF_C_ROOT=${NETCDF_HOME}
# export NETCDF_FORTRAN_ROOT=${NETCDF_FORTRAN_HOME}

# List modules loaded
module list

