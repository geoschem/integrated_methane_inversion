###############################################################################
# gcclassic.rocky+gnu10.minimal.env
#
# Environment file for GCClassic + Rocky Linux + GNU Compiler Collection 10.2.0
#
# Does not include any Spack-built modules, only FASRC-built modules.
# Useful for running in the Cannon queues, or to start fresh Spack builds.
###############################################################################

# Display message (if we are in a terminal window)
if [[ $- = *i* ]] ; then
  echo "Loading modules for GEOS-Chem Classic, please wait ..."
fi

#==============================================================================
# Unload all previously-unloaded software
#==============================================================================

# Unload packages loaded with "module load"
module purge

# Unload packages loaded with "spack load"
if [[ "x${SPACK_ROOT}" != "x" ]]; then
    spack unload --all
fi

#==============================================================================
# Load FASRC-built software packages for Rocky Linux and GNU 10.2.0
#==============================================================================
if [[ $- = *i* ]] ; then
  echo "... Loading FASRC-built software, please wait ..."
fi

# Load FASRC-built modules
module load gcc/10.2.0-fasrc01             # gcc / g++ / gfortran
module load openmpi/4.1.0-fasrc01          # MPI
module load netcdf-c/4.8.0-fasrc01         # netcdf-c
module load netcdf-fortran/4.5.3-fasrc01   # netcdf-fortran
module load flex/2.6.4-fasrc01             # Fle x lexer (needed for KPP)
module load cmake/3.25.2-fasrc01           # CMake (needed to compile)

# Additional FASRC-built modules
# Uncomment if you need to use these
#module load IDL/8.7.2-fasrc01               # IDL language (needed for GAMAP)
##module load R/4.2.2-fasrc01                # R language
##module load matlab/R2022b-fasrc01          # matlab language

#==============================================================================
# Environment variables and related settings
# (NOTE: Lmod will define <module>_HOME variables for each loaded module
#==============================================================================

# Make all files world-readable by default
umask 022

# Remove any references to "colordiff", which is only available via Spack
unalias diff 2>/dev/null

# Root to RockyLinux libraries
export ROCKY_ROOT="/net/holy-nfsisilon/ifs/rc_labs/jacob_lab/Lab/seasfs01/Lab/RockyLinux"

# Set number of threads for OpenMP.  If running in a SLURM environment,
# use the number of requested cores.  Otherwise use 8 cores for OpenMP.
if [[ "x${SLURM_CPUS_PER_TASK}" == "x" ]]; then
    export OMP_NUM_THREADS=8
else
    export OMP_NUM_THREADS="${SLURM_CPUS_PER_TASK}"
fi

# Max out the stacksize memory limit
export OMP_STACKSIZE="500m"

# Compilers
export CC="gcc"
export CXX="g++"
export FC="gfortran"
export F77="${FC}"

# netCDF
if [[ "x${NETCDF_HOME}" == "x" ]]; then
   export NETCDF_HOME="${NETCDF_C_HOME}"
fi
export NETCDF_C_ROOT="${NETCDF_HOME}"
export NETCDF_FORTRAN_ROOT="${NETCDF_FORTRAN_HOME}"

# KPP 3.0.0+
export KPP_FLEX_LIB_DIR="${FLEX_HOME}/lib64"

#==============================================================================
# Set limits
#==============================================================================

ulimit -c unlimited   # coredumpsize
ulimit -u 50000       # maxproc
ulimit -v unlimited   # vmemoryuse
ulimit -s unlimited   # stacksize

#==============================================================================
# Print information
#==============================================================================

module list

echo ""
echo "Environment:"
echo ""
echo "CC                  : ${CC}"
echo "CXX                 : ${CXX}"
echo "FC                  : ${FC}"
echo "KPP_FLEX_LIB_DIR    : ${KPP_FLEX_LIB_DIR}"
echo "NETCDF_HOME         : ${NETCDF_HOME}"
echo "NETCDF_FORTRAN_HOME : ${NETCDF_FORTRAN_HOME}"
echo "OMP_NUM_THREADS     : ${OMP_NUM_THREADS}"
echo "ROCKY_ROOT          : ${ROCKY_ROOT}"
echo ""
echo "Done sourcing ${BASH_SOURCE[0]}"
